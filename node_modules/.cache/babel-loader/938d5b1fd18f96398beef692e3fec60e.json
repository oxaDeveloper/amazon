{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bubbler = void 0;\n\nconst Utils_1 = require(\"../../../Utils\");\n\nconst Core_1 = require(\"../../../Core\");\n\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue >= optionsValue) {\n    const value = particleValue + (modeValue - optionsValue) * ratio;\n    return (0, Utils_1.clamp)(value, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    const value = particleValue - (optionsValue - modeValue) * ratio;\n    return (0, Utils_1.clamp)(value, modeValue, particleValue);\n  }\n}\n\nclass Bubbler extends Core_1.ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = options.interactivity.events,\n          divs = events.onDiv,\n          divBubble = (0, Utils_1.isDivModeEnabled)(\"bubble\", divs);\n\n    if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode;\n    const clickMode = events.onClick.mode;\n    return (0, Utils_1.isInArray)(\"bubble\", hoverMode) || (0, Utils_1.isInArray)(\"bubble\", clickMode) || divBubble;\n  }\n\n  reset(particle, force) {\n    if (!(!particle.bubble.inRange || force)) {\n      return;\n    }\n\n    delete particle.bubble.div;\n    delete particle.bubble.opacity;\n    delete particle.bubble.radius;\n    delete particle.bubble.color;\n  }\n\n  interact() {\n    const options = this.container.actualOptions,\n          events = options.interactivity.events,\n          onHover = events.onHover,\n          onClick = events.onClick,\n          hoverEnabled = onHover.enable,\n          hoverMode = onHover.mode,\n          clickEnabled = onClick.enable,\n          clickMode = onClick.mode,\n          divs = events.onDiv;\n\n    if (hoverEnabled && (0, Utils_1.isInArray)(\"bubble\", hoverMode)) {\n      this.hoverBubble();\n    } else if (clickEnabled && (0, Utils_1.isInArray)(\"bubble\", clickMode)) {\n      this.clickBubble();\n    } else {\n      (0, Utils_1.divModeExecute)(\"bubble\", divs, (selector, div) => this.singleSelectorHover(selector, div));\n    }\n  }\n\n  singleSelectorHover(selector, div) {\n    const container = this.container,\n          selectors = document.querySelectorAll(selector);\n\n    if (!selectors.length) {\n      return;\n    }\n\n    selectors.forEach(item => {\n      const elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      },\n            repulseRadius = elem.offsetWidth / 2 * pxRatio,\n            area = div.type === \"circle\" ? new Core_1.Circle(pos.x, pos.y, repulseRadius) : new Core_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n            query = container.particles.quadTree.query(area);\n\n      for (const particle of query) {\n        if (!area.contains(particle.getPosition())) {\n          continue;\n        }\n\n        particle.bubble.inRange = true;\n        const divs = container.actualOptions.interactivity.modes.bubble.divs;\n        const divBubble = (0, Utils_1.divMode)(divs, elem);\n\n        if (!particle.bubble.div || particle.bubble.div !== elem) {\n          this.reset(particle, true);\n          particle.bubble.div = elem;\n        }\n\n        this.hoverBubbleSize(particle, 1, divBubble);\n        this.hoverBubbleOpacity(particle, 1, divBubble);\n        this.hoverBubbleColor(particle, 1, divBubble);\n      }\n    });\n  }\n\n  process(particle, distMouse, timeSpent, data) {\n    const container = this.container,\n          bubbleParam = data.bubbleObj.optValue;\n\n    if (bubbleParam === undefined) {\n      return;\n    }\n\n    const options = container.actualOptions,\n          bubbleDuration = options.interactivity.modes.bubble.duration,\n          bubbleDistance = container.retina.bubbleModeDistance,\n          particlesParam = data.particlesObj.optValue,\n          pObjBubble = data.bubbleObj.value,\n          pObj = data.particlesObj.value || 0,\n          type = data.type;\n\n    if (bubbleParam === particlesParam) {\n      return;\n    }\n\n    if (!container.bubble.durationEnd) {\n      if (distMouse <= bubbleDistance) {\n        const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n        if (obj !== bubbleParam) {\n          const value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n          if (type === \"size\") {\n            particle.bubble.radius = value;\n          }\n\n          if (type === \"opacity\") {\n            particle.bubble.opacity = value;\n          }\n        }\n      } else {\n        if (type === \"size\") {\n          delete particle.bubble.radius;\n        }\n\n        if (type === \"opacity\") {\n          delete particle.bubble.opacity;\n        }\n      }\n    } else if (pObjBubble) {\n      if (type === \"size\") {\n        delete particle.bubble.radius;\n      }\n\n      if (type === \"opacity\") {\n        delete particle.bubble.opacity;\n      }\n    }\n  }\n\n  clickBubble() {\n    var _a, _b;\n\n    const container = this.container,\n          options = container.actualOptions,\n          mouseClickPos = container.interactivity.mouse.clickPosition;\n\n    if (!mouseClickPos) {\n      return;\n    }\n\n    const distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n\n    for (const particle of query) {\n      if (!container.bubble.clicking) {\n        continue;\n      }\n\n      particle.bubble.inRange = !container.bubble.durationEnd;\n      const pos = particle.getPosition(),\n            distMouse = (0, Utils_1.getDistance)(pos, mouseClickPos),\n            timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n      if (timeSpent > options.interactivity.modes.bubble.duration) {\n        container.bubble.durationEnd = true;\n      }\n\n      if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n        container.bubble.clicking = false;\n        container.bubble.durationEnd = false;\n      }\n\n      const sizeData = {\n        bubbleObj: {\n          optValue: container.retina.bubbleModeSize,\n          value: particle.bubble.radius\n        },\n        particlesObj: {\n          optValue: (0, Utils_1.getRangeMax)(particle.options.size.value) * container.retina.pixelRatio,\n          value: particle.size.value\n        },\n        type: \"size\"\n      };\n      this.process(particle, distMouse, timeSpent, sizeData);\n      const opacityData = {\n        bubbleObj: {\n          optValue: options.interactivity.modes.bubble.opacity,\n          value: particle.bubble.opacity\n        },\n        particlesObj: {\n          optValue: (0, Utils_1.getRangeMax)(particle.options.opacity.value),\n          value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1\n        },\n        type: \"opacity\"\n      };\n      this.process(particle, distMouse, timeSpent, opacityData);\n\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= container.retina.bubbleModeDistance) {\n          this.hoverBubbleColor(particle, distMouse);\n        } else {\n          delete particle.bubble.color;\n        }\n      } else {\n        delete particle.bubble.color;\n      }\n    }\n  }\n\n  hoverBubble() {\n    const container = this.container,\n          mousePos = container.interactivity.mouse.position;\n\n    if (mousePos === undefined) {\n      return;\n    }\n\n    const distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n    for (const particle of query) {\n      particle.bubble.inRange = true;\n      const pos = particle.getPosition(),\n            pointDistance = (0, Utils_1.getDistance)(pos, mousePos),\n            ratio = 1 - pointDistance / distance;\n\n      if (pointDistance <= distance) {\n        if (ratio >= 0 && container.interactivity.status === Core_1.Constants.mouseMoveEvent) {\n          this.hoverBubbleSize(particle, ratio);\n          this.hoverBubbleOpacity(particle, ratio);\n          this.hoverBubbleColor(particle, ratio);\n        }\n      } else {\n        this.reset(particle);\n      }\n\n      if (container.interactivity.status === Core_1.Constants.mouseLeaveEvent) {\n        this.reset(particle);\n      }\n    }\n  }\n\n  hoverBubbleSize(particle, ratio, divBubble) {\n    const container = this.container,\n          modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n\n    if (modeSize === undefined) {\n      return;\n    }\n\n    const optSize = (0, Utils_1.getRangeMax)(particle.options.size.value) * container.retina.pixelRatio;\n    const pSize = particle.size.value;\n    const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n    if (size !== undefined) {\n      particle.bubble.radius = size;\n    }\n  }\n\n  hoverBubbleOpacity(particle, ratio, divBubble) {\n    var _a, _b, _c;\n\n    const container = this.container,\n          options = container.actualOptions,\n          modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n\n    if (!modeOpacity) {\n      return;\n    }\n\n    const optOpacity = particle.options.opacity.value;\n    const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n    const opacity = calculateBubbleValue(pOpacity, modeOpacity, (0, Utils_1.getRangeMax)(optOpacity), ratio);\n\n    if (opacity !== undefined) {\n      particle.bubble.opacity = opacity;\n    }\n  }\n\n  hoverBubbleColor(particle, ratio, divBubble) {\n    const options = this.container.actualOptions;\n    const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n\n    if (!particle.bubble.finalColor) {\n      const modeColor = bubbleOptions.color;\n\n      if (!modeColor) {\n        return;\n      }\n\n      const bubbleColor = modeColor instanceof Array ? (0, Utils_1.itemFromArray)(modeColor) : modeColor;\n      particle.bubble.finalColor = (0, Utils_1.colorToHsl)(bubbleColor);\n    }\n\n    if (!particle.bubble.finalColor) {\n      return;\n    }\n\n    if (bubbleOptions.mix) {\n      particle.bubble.color = undefined;\n      const pColor = particle.getFillColor();\n      particle.bubble.color = pColor ? (0, Utils_1.rgbToHsl)((0, Utils_1.colorMix)(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n    } else {\n      particle.bubble.color = particle.bubble.finalColor;\n    }\n  }\n\n}\n\nexports.Bubbler = Bubbler;","map":{"version":3,"sources":["/Users/sukhrobmajidov/Desktop/myPersonalWeb/reactNext/amazon/node_modules/tsparticles/Interactions/External/Bubble/Bubbler.js"],"names":["Object","defineProperty","exports","value","Bubbler","Utils_1","require","Core_1","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","clamp","ExternalInteractorBase","constructor","container","isEnabled","options","actualOptions","mouse","interactivity","events","divs","onDiv","divBubble","isDivModeEnabled","onHover","enable","position","onClick","clickPosition","hoverMode","mode","clickMode","isInArray","reset","particle","force","bubble","inRange","div","opacity","radius","color","interact","hoverEnabled","clickEnabled","hoverBubble","clickBubble","divModeExecute","selector","singleSelectorHover","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","retina","pixelRatio","pos","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","type","Circle","Rectangle","query","particles","quadTree","contains","getPosition","modes","divMode","hoverBubbleSize","hoverBubbleOpacity","hoverBubbleColor","process","distMouse","timeSpent","data","bubbleParam","bubbleObj","optValue","undefined","bubbleDuration","duration","bubbleDistance","bubbleModeDistance","particlesParam","particlesObj","pObjBubble","pObj","durationEnd","obj","_a","_b","mouseClickPos","distance","queryCircle","clicking","getDistance","Date","getTime","clickTime","sizeData","bubbleModeSize","getRangeMax","size","opacityData","mousePos","pointDistance","status","Constants","mouseMoveEvent","mouseLeaveEvent","modeSize","optSize","pSize","_c","modeOpacity","optOpacity","pOpacity","bubbleOptions","finalColor","modeColor","bubbleColor","Array","itemFromArray","colorToHsl","mix","pColor","getFillColor","rgbToHsl","colorMix"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bubbler = void 0;\nconst Utils_1 = require(\"../../../Utils\");\nconst Core_1 = require(\"../../../Core\");\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return (0, Utils_1.clamp)(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return (0, Utils_1.clamp)(value, modeValue, particleValue);\n    }\n}\nclass Bubbler extends Core_1.ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = options.interactivity.events, divs = events.onDiv, divBubble = (0, Utils_1.isDivModeEnabled)(\"bubble\", divs);\n        if (!(divBubble || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return (0, Utils_1.isInArray)(\"bubble\", hoverMode) || (0, Utils_1.isInArray)(\"bubble\", clickMode) || divBubble;\n    }\n    reset(particle, force) {\n        if (!(!particle.bubble.inRange || force)) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    interact() {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && (0, Utils_1.isInArray)(\"bubble\", hoverMode)) {\n            this.hoverBubble();\n        }\n        else if (clickEnabled && (0, Utils_1.isInArray)(\"bubble\", clickMode)) {\n            this.clickBubble();\n        }\n        else {\n            (0, Utils_1.divModeExecute)(\"bubble\", divs, (selector, div) => this.singleSelectorHover(selector, div));\n        }\n    }\n    singleSelectorHover(selector, div) {\n        const container = this.container, selectors = document.querySelectorAll(selector);\n        if (!selectors.length) {\n            return;\n        }\n        selectors.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                ? new Core_1.Circle(pos.x, pos.y, repulseRadius)\n                : new Core_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area);\n            for (const particle of query) {\n                if (!area.contains(particle.getPosition())) {\n                    continue;\n                }\n                particle.bubble.inRange = true;\n                const divs = container.actualOptions.interactivity.modes.bubble.divs;\n                const divBubble = (0, Utils_1.divMode)(divs, elem);\n                if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    this.reset(particle, true);\n                    particle.bubble.div = elem;\n                }\n                this.hoverBubbleSize(particle, 1, divBubble);\n                this.hoverBubbleOpacity(particle, 1, divBubble);\n                this.hoverBubbleColor(particle, 1, divBubble);\n            }\n        });\n    }\n    process(particle, distMouse, timeSpent, data) {\n        const container = this.container, bubbleParam = data.bubbleObj.optValue;\n        if (bubbleParam === undefined) {\n            return;\n        }\n        const options = container.actualOptions, bubbleDuration = options.interactivity.modes.bubble.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n        if (bubbleParam === particlesParam) {\n            return;\n        }\n        if (!container.bubble.durationEnd) {\n            if (distMouse <= bubbleDistance) {\n                const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                if (obj !== bubbleParam) {\n                    const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                    if (type === \"size\") {\n                        particle.bubble.radius = value;\n                    }\n                    if (type === \"opacity\") {\n                        particle.bubble.opacity = value;\n                    }\n                }\n            }\n            else {\n                if (type === \"size\") {\n                    delete particle.bubble.radius;\n                }\n                if (type === \"opacity\") {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n        else if (pObjBubble) {\n            if (type === \"size\") {\n                delete particle.bubble.radius;\n            }\n            if (type === \"opacity\") {\n                delete particle.bubble.opacity;\n            }\n        }\n    }\n    clickBubble() {\n        var _a, _b;\n        const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition;\n        if (!mouseClickPos) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n        for (const particle of query) {\n            if (!container.bubble.clicking) {\n                continue;\n            }\n            particle.bubble.inRange = !container.bubble.durationEnd;\n            const pos = particle.getPosition(), distMouse = (0, Utils_1.getDistance)(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (timeSpent > options.interactivity.modes.bubble.duration) {\n                container.bubble.durationEnd = true;\n            }\n            if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n                container.bubble.clicking = false;\n                container.bubble.durationEnd = false;\n            }\n            const sizeData = {\n                bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius,\n                },\n                particlesObj: {\n                    optValue: (0, Utils_1.getRangeMax)(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value,\n                },\n                type: \"size\",\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            const opacityData = {\n                bubbleObj: {\n                    optValue: options.interactivity.modes.bubble.opacity,\n                    value: particle.bubble.opacity,\n                },\n                particlesObj: {\n                    optValue: (0, Utils_1.getRangeMax)(particle.options.opacity.value),\n                    value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1,\n                },\n                type: \"opacity\",\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= container.retina.bubbleModeDistance) {\n                    this.hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n            else {\n                delete particle.bubble.color;\n            }\n        }\n    }\n    hoverBubble() {\n        const container = this.container, mousePos = container.interactivity.mouse.position;\n        if (mousePos === undefined) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n        for (const particle of query) {\n            particle.bubble.inRange = true;\n            const pos = particle.getPosition(), pointDistance = (0, Utils_1.getDistance)(pos, mousePos), ratio = 1 - pointDistance / distance;\n            if (pointDistance <= distance) {\n                if (ratio >= 0 && container.interactivity.status === Core_1.Constants.mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle, ratio);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === Core_1.Constants.mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    }\n    hoverBubbleSize(particle, ratio, divBubble) {\n        const container = this.container, modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        const optSize = (0, Utils_1.getRangeMax)(particle.options.size.value) * container.retina.pixelRatio;\n        const pSize = particle.size.value;\n        const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    }\n    hoverBubbleOpacity(particle, ratio, divBubble) {\n        var _a, _b, _c;\n        const container = this.container, options = container.actualOptions, modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n        if (!modeOpacity) {\n            return;\n        }\n        const optOpacity = particle.options.opacity.value;\n        const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n        const opacity = calculateBubbleValue(pOpacity, modeOpacity, (0, Utils_1.getRangeMax)(optOpacity), ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    }\n    hoverBubbleColor(particle, ratio, divBubble) {\n        const options = this.container.actualOptions;\n        const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n        if (!particle.bubble.finalColor) {\n            const modeColor = bubbleOptions.color;\n            if (!modeColor) {\n                return;\n            }\n            const bubbleColor = modeColor instanceof Array ? (0, Utils_1.itemFromArray)(modeColor) : modeColor;\n            particle.bubble.finalColor = (0, Utils_1.colorToHsl)(bubbleColor);\n        }\n        if (!particle.bubble.finalColor) {\n            return;\n        }\n        if (bubbleOptions.mix) {\n            particle.bubble.color = undefined;\n            const pColor = particle.getFillColor();\n            particle.bubble.color = pColor\n                ? (0, Utils_1.rgbToHsl)((0, Utils_1.colorMix)(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                : particle.bubble.finalColor;\n        }\n        else {\n            particle.bubble.color = particle.bubble.finalColor;\n        }\n    }\n}\nexports.Bubbler = Bubbler;\n"]},"metadata":{},"sourceType":"script"}