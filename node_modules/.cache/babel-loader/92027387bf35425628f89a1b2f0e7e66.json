{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Grabber = void 0;\n\nconst Utils_1 = require(\"../../../Utils\");\n\nconst Core_1 = require(\"../../../Core\");\n\nclass Grabber extends Core_1.ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled() {\n    const container = this.container,\n          mouse = container.interactivity.mouse,\n          events = container.actualOptions.interactivity.events;\n    return events.onHover.enable && !!mouse.position && (0, Utils_1.isInArray)(\"grab\", events.onHover.mode);\n  }\n\n  reset() {}\n\n  interact() {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions,\n          interactivity = options.interactivity;\n\n    if (interactivity.events.onHover.enable && container.interactivity.status === Core_1.Constants.mouseMoveEvent) {\n      const mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      const distance = container.retina.grabModeDistance,\n            query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n      for (const particle of query) {\n        const pos = particle.getPosition(),\n              pointDistance = (0, Utils_1.getDistance)(pos, mousePos);\n\n        if (pointDistance <= distance) {\n          const grabLineOptions = interactivity.modes.grab.links,\n                lineOpacity = grabLineOptions.opacity,\n                opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n\n          if (opacityLine <= 0) {\n            continue;\n          }\n\n          const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n\n          if (!container.particles.grabLineColor) {\n            const linksOptions = options.interactivity.modes.grab.links;\n            container.particles.grabLineColor = (0, Utils_1.getLinkRandomColor)(optColor, linksOptions.blink, linksOptions.consent);\n          }\n\n          const colorLine = (0, Utils_1.getLinkColor)(particle, undefined, container.particles.grabLineColor);\n\n          if (!colorLine) {\n            return;\n          }\n\n          container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n        }\n      }\n    }\n  }\n\n}\n\nexports.Grabber = Grabber;","map":{"version":3,"sources":["/Users/sukhrobmajidov/Desktop/myPersonalWeb/reactNext/amazon/node_modules/tsparticles/Interactions/External/Grab/Grabber.js"],"names":["Object","defineProperty","exports","value","Grabber","Utils_1","require","Core_1","ExternalInteractorBase","constructor","container","isEnabled","mouse","interactivity","events","actualOptions","onHover","enable","position","isInArray","mode","reset","interact","_a","options","status","Constants","mouseMoveEvent","mousePos","distance","retina","grabModeDistance","query","particles","quadTree","queryCircle","particle","pos","getPosition","pointDistance","getDistance","grabLineOptions","modes","grab","links","lineOpacity","opacity","opacityLine","optColor","color","grabLineColor","linksOptions","getLinkRandomColor","blink","consent","colorLine","getLinkColor","undefined","canvas","drawGrabLine"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grabber = void 0;\nconst Utils_1 = require(\"../../../Utils\");\nconst Core_1 = require(\"../../../Core\");\nclass Grabber extends Core_1.ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, mouse = container.interactivity.mouse, events = container.actualOptions.interactivity.events;\n        return events.onHover.enable && !!mouse.position && (0, Utils_1.isInArray)(\"grab\", events.onHover.mode);\n    }\n    reset() {\n    }\n    interact() {\n        var _a;\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (interactivity.events.onHover.enable && container.interactivity.status === Core_1.Constants.mouseMoveEvent) {\n            const mousePos = container.interactivity.mouse.position;\n            if (!mousePos) {\n                return;\n            }\n            const distance = container.retina.grabModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n            for (const particle of query) {\n                const pos = particle.getPosition(), pointDistance = (0, Utils_1.getDistance)(pos, mousePos);\n                if (pointDistance <= distance) {\n                    const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n                    if (opacityLine <= 0) {\n                        continue;\n                    }\n                    const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n                    if (!container.particles.grabLineColor) {\n                        const linksOptions = options.interactivity.modes.grab.links;\n                        container.particles.grabLineColor = (0, Utils_1.getLinkRandomColor)(optColor, linksOptions.blink, linksOptions.consent);\n                    }\n                    const colorLine = (0, Utils_1.getLinkColor)(particle, undefined, container.particles.grabLineColor);\n                    if (!colorLine) {\n                        return;\n                    }\n                    container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n                }\n            }\n        }\n    }\n}\nexports.Grabber = Grabber;\n"]},"metadata":{},"sourceType":"script"}